@model Frotend.ArchivoCentral.Micetur.Areas.Digitalizacion.Models.MicroformaGrabaModelView
@{
    Layout = null;
}

<link href="~/assets/css/Microforma/Formato.css" rel="stylesheet" />
<link href="~/assets/css/Microforma/Modals.css" rel="stylesheet" />
<script type="text/javascript">
    $(document).ready(function () {
        CountCharactersControlTxt('MICROFORMA_OBSERVACION', 'Microforma_Grabar_lbl1', 3000);
        ValidarNumerosOtros("#MICROFORMA_COPIAS", false, true);
        $('#Microforma_Grabar_btn_Grabar').click(function (e) {
            if ($("#FrmMicroformaGrabar").valid()) {
                if ($('#HDF_ACCION').val() == "N") {
                    MicroformaGrabar_Grabar();
                } else {
                    Microforma_Editar(); 
                }
            }
        });
    });

    function ValidarNumerosOtros(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode == 8) return true;
        if (charCode == 46) return false;
        var patron = /([0-9]|[.])/;
        var te = String.fromCharCode(charCode);
        return patron.test(te);
    }

    function ValidarNumerosOtros(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode == 8) return true;
        if (charCode == 46) return false;
        var patron = /([0-9]|[.])/;
        var te = String.fromCharCode(charCode);
        return patron.test(te);
    }

    function ValidarNumerosOtrosR(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode == 8) return true;
        if (charCode == 46) return false;

        //debugger;
        var patron = /([0-9]|[.])/;
        var te = String.fromCharCode(charCode);
        //debugger;
        var valor = evt.target.value;
        var nuevovalor = Number(valor) + '' + Number(evt.key)
        if (nuevovalor > 59) return false;
        return patron.test(te);
    }

    function CountCharactersControlTxt(obj, lblObject, max) {
        try {
            var total = max;
            cant = document.getElementById(obj).value.length;
            total = total - cant
            if (cant > max) {
                var aux = document.getElementById(obj).value;
                document.getElementById(obj).value = aux.substring(0, max);
                return;
            }
            $("#" + lblObject).html("Nº Caracteres: " + cant + " restan " + total);
        } catch (e) {
            alert(e.Message);
        }
    }

    function LeadingZero(Time) {
        return (Time < 10) ? "0" + Time : +Time;
    }

    var MicroformaH_Hora = "00";
    var MicroformaH_Min = "00";
    var MicroformaH_Sec = "00";
    function timePicker(id) {
        var input = document.getElementById(id);
        var timePicker = document.createElement('div');
        timePicker.classList.add('time-picker');


        var Microforma_Inicio = new Date().getTime();
        var Microforma_Inicio_Temp = new Date(Microforma_Inicio);
        MicroformaH_Hora = LeadingZero(Microforma_Inicio_Temp.getHours());
        MicroformaH_Min = LeadingZero(Microforma_Inicio_Temp.getUTCMinutes());
        MicroformaH_Sec = LeadingZero(Microforma_Inicio_Temp.getUTCSeconds());
        var Microforma_Hora = MicroformaH_Hora + ":" + MicroformaH_Min + ":" + MicroformaH_Sec;

        input.value = Microforma_Hora;

        input.onclick = function () {
            timePicker.classList.toggle('open');

            this.setAttribute('disabled', 'disabled');
            timePicker.innerHTML += `
                                  <div class="set-time">
                                     <div class="label">
                                        <a id="plusH" >+</a>
                                        <input class="set" type="text" id="hour" value="`+ MicroformaH_Hora + `" maxlength="2" onkeypress = "return ValidarNumerosOtrosR(event)">
                                        <a id="minusH">-</a>
                                     </div>
                                     <div class="label">
                                        <a id="plusM">+</a>
                                        <input class="set" type="text" id="minute" value="`+ MicroformaH_Min + `" maxlength="2" onkeypress = "return ValidarNumerosOtrosR(event)">
                                        <a id="minusM">-</a>
                                     </div>
                                    <div class="label">
                                        <a id="plusS">+</a>
                                        <input class="set" type="text" id="second" value="`+ MicroformaH_Sec + `" maxlength="2" onkeypress = "return ValidarNumerosOtrosR(event)">
                                        <a id="minusS">-</a>
                                     </div>
                                  </div>
                                  <div id="submitTime">actualizar</div>`;
            this.after(timePicker);
            var plusH = document.getElementById('plusH');
            var minusH = document.getElementById('minusH');
            var plusM = document.getElementById('plusM');
            var minusM = document.getElementById('minusM');
            var plusS = document.getElementById('plusS');
            var minusS = document.getElementById('minusS');
            var h = parseInt(document.getElementById('hour').value);
            var m = parseInt(document.getElementById('minute').value);
            var s = parseInt(document.getElementById('second').value);
            //increment hour
            plusH.onclick = function () {
                h = isNaN(h) ? 0 : h;
                if (h === 23) {
                    h = -1;
                }
                h++;
                document.getElementById('hour').value = (h < 10 ? '0' : 0) + h;
            }
            //decrement hour
            minusH.onclick = function () {
                h = isNaN(h) ? 0 : h;
                if (h === 0) {
                    h = 24;
                }
                h--;
                document.getElementById('hour').value = (h < 10 ? '0' : 0) + h;
            }
            //increment hour
            plusM.onclick = function () {
                m = isNaN(m) ? 0 : m;
                if (m === 59) {
                    m = -1;
                }
                m++;// = m + 15;
                document.getElementById('minute').value = (m < 10 ? '0' : 0) + m;
            }
            //decrement hour
            minusM.onclick = function () {
                m = isNaN(m) ? 0 : m;
                if (m === 0) {
                    m = 60;
                }
                m--;
                //m = m - 15;
                document.getElementById('minute').value = (m < 10 ? '0' : 0) + m;
            }
            //increment second
            plusS.onclick = function () {
                s = isNaN(s) ? 0 : s;
                if (s === 59) {
                    s = -1;
                }
                s++;
                document.getElementById('second').value = (s < 10 ? '0' : 0) + s;
            }
            //decrement second
            minusS.onclick = function () {
                s = isNaN(s) ? 0 : s;
                if (s === 0) {
                    s = 60;
                }
                s--;
                document.getElementById('second').value = (s < 10 ? '0' : 0) + s;
            }
            //submit timepicker
            var submit = document.getElementById("submitTime");
            submit.onclick = function () {

                MicroformaH_Hora = document.getElementById('hour').value;
                MicroformaH_Min = document.getElementById('minute').value;
                MicroformaH_Sec = document.getElementById('second').value;

                if (MicroformaH_Hora.length == 1) MicroformaH_Hora = '0' + MicroformaH_Hora;
                if (MicroformaH_Min.length == 1) MicroformaH_Min = '0' + MicroformaH_Min;
                if (MicroformaH_Sec.length == 1) MicroformaH_Sec = '0' + MicroformaH_Sec;

                input.value = MicroformaH_Hora + ":" + MicroformaH_Min + ":" + MicroformaH_Sec;
                //document.getElementById('hour').value + ':' + document.getElementById('minute').value + ':' + document.getElementById('second').value;
                input.removeAttribute('disabled');
                timePicker.classList.toggle('open');
                timePicker.innerHTML = '';
                $('#MICROFORMA_HORA').valid();
            }
        }
    }

    timePicker('MICROFORMA_HORA');

    //$('#MICROFORMA_FECHA').onkeypress(function (e) {
    //    return ValidarNumerosOtros(e);
    //});

    $('#MICROFORMA_FECHA').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        changeFirstDay: false,
        placeholder: "dd/MM/yyyy"
    });



    $('.modal-dialogMicroforma').draggable({
        handle: ".modal-header",
        cursor: "handler"
    });

</script>
<style>
    .time-picker {
        display: flex;
        justify-content: center;
        flex-direction: column;
        transition: all .4s ease;
        height: 0;
        overflow: hidden;
    }

        .time-picker .set-time {
            display: flex;
            justify-content: center;
            margin-bottom: 15px;
        }

    .label {
        width: 60px;
        margin: 0 5px;
        text-align: center;
        line-height: 34px;
        display: inline-style;
    }

        .label a {
            display: block;
            border: 1px solid #DDDDDD;
            cursor: pointer;
            font-size: 28px;
            font-weight: bold;
            border-radius: 3px;
            text-decoration: none
        }

            .label a:hover, .label a:active {
                background-color: red;
                color: #FFFFFF;
            }



        .label .set {
            text-align: center;
            box-sizing: border-box;
            width: 100%;
            height: 40px;
            line-height: 34px;
            font-size: 15px;
            font-weight: bold;
            border: transparent;
        }



    #submitTime {
        text-align: center;
        line-height: 34px;
        border: 1px solid #DDDDDD;
        width: 128px;
        margin: auto;
        border-radius: 3px;
        cursor: pointer;
        text-transform: uppercase;
        font-weight: bold;
    }



    .time-picker.open {
        border: 1px solid #DDDDDD;
        padding: 15px;
        transition: all .5s ease;
        height: auto;
        background-color: #FCFCFC;
    }
</style>
@using (Html.BeginForm("", "", new { @area = "" }, FormMethod.Post, false, new { @id = "FrmMicroformaGrabar", @class = "form-horizontal" }))
{
    @Html.ValidationSummary(true)
    <div class="modal-dialogMicroforma">
        <div class="modal-content" style="width:100%;">
            <div class="modal-header" style="cursor: move; background-color: #ca2626">
                <div class="col-sm-14">
                    <button class="close" aria-hidden="true" data-dismiss="modal" type="button">× </button>
                    <h4 class="modal-title"><i class='clip-new-tab'></i>&nbsp; Grabar Microforma </h4>
                </div>
            </div>
            <div class="modal-body">
                <fieldset style="width: 100%;">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="col-sm-12 inline-container-Group">
                                <p class="modal-title" style="color: #999; font-size: 15px; margin-bottom: 5px; margin-top: -5px">Ingresar los siguientes datos: </p>
                                <fieldset style="width: 100%;">

                                    <div class="row">
                                        <div class="col-sm-4">
                                            <label class="col-sm-15 control-label" for="form-field-1" style="width: 100%; color: black;">Fecha de grabación: </label>
                                        </div>
                                        <div class="col-sm-6">
                                            @Html.TextBoxFor(model => model.MICROFORMA_FECHA, new { @class = "form-control", @maxlength = "100", @style = "width:100%", @placeholder = "DD/MM/YYYY", @autocomplete = "off" })
                                            @Html.ValidationMessageFor(model => model.MICROFORMA_FECHA, string.Empty, new { @class = "cssMessageError" })
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-4">
                                            <label class="col-sm-15 control-label" for="form-field-1" style="width: 100%; color: black;">Hora de grabación: </label>
                                        </div>
                                        <div class="col-sm-6">
                                            @Html.TextBoxFor(model => model.MICROFORMA_HORA, new { @class = "form-control", @maxlength = "100", @style = "width:100%", @placeholder = "HH:mm:ss" })
                                            @Html.ValidationMessageFor(model => model.MICROFORMA_HORA, string.Empty, new { @class = "cssMessageError" })
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-4">
                                            <label class="col-sm-15 control-label" for="form-field-1" style="width: 100%; color: black;">Nro. Volumen: </label>
                                        </div>
                                        <div class="col-sm-6">
                                            @Html.TextBoxFor(model => model.MICROFORMA_NROVOLUMEN, new { @class = "form-control", @maxlength = "100", @style = "width:100%" })
                                            @Html.ValidationMessageFor(model => model.MICROFORMA_NROVOLUMEN, string.Empty, new { @class = "cssMessageError" })
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-4">
                                            <label class="col-sm-15 control-label" for="form-field-1" style="width: 100%; color: black;">Código de medio de soporte: </label>
                                        </div>
                                        <div class="col-sm-6">
                                            @Html.TextBoxFor(model => model.MICROFORMA_CODIGO_SOPORTE, new { @class = "form-control", @maxlength = "100", @style = "width:100%" })
                                            @Html.ValidationMessageFor(model => model.MICROFORMA_CODIGO_SOPORTE, string.Empty, new { @class = "cssMessageError" })
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-4">
                                            <label class="col-sm-15 control-label" for="form-field-1" style="width: 100%; color: black;">Tipo de soporte: </label>
                                        </div>
                                        <div class="col-sm-6">
                                            @Html.DropDownListFor(model => model.MICROFORMA_ID_TIPO_SOPORTE, Model.Lista_MICROFORMA_ID_TIPO_SOPORTE, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.MICROFORMA_ID_TIPO_SOPORTE, string.Empty, new { @class = "cssMessageError" })
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-4">
                                            <label class="col-sm-15 control-label" for="form-field-1" style="width: 100%; color: black;">N° de Acta: </label>
                                        </div>
                                        <div class="col-sm-6">
                                            @Html.TextBoxFor(model => model.MICROFORMA_ACTA, new { @class = "form-control", @maxlength = "100", @style = "width:100%;text-transform: uppercase;" })
                                            @Html.ValidationMessageFor(model => model.MICROFORMA_ACTA, string.Empty, new { @class = "cssMessageError" })
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-4">
                                            <label class="col-sm-15 control-label" for="form-field-1" style="width: 100%; color: black;">N° de Copias: </label>
                                        </div>
                                        <div class="col-sm-6">
                                            @Html.TextBoxFor(model => model.MICROFORMA_COPIAS, new { @class = "form-control", @maxlength = "100", @style = "width:100%", onkeypress = "return ValidarNumerosOtros(event)" })
                                            @Html.ValidationMessageFor(model => model.MICROFORMA_COPIAS, string.Empty, new { @class = "cssMessageError" })
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-sm-4">
                                            <label class="col-sm-15 control-label" for="form-field-1" style="width: 100%; color: black;">Acta Apertura: </label>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group ">
                                                <div style=" height: 30px; margin-bottom: 3px;" class="form-control file-caption  kv-fileinput-caption">
                                                    <div class="file-caption-name" id="filenameApertura"></div>
                                                </div>
                                                <div class="input-group-btn">
                                                    <label for="fileActaApertura" class="btn btn-primary btn-file">
                                                        <i class=" clip-upload-3"></i>&nbsp; <span class="hidden-xs">Cargar …</span>
                                                        <input id="fileActaApertura" type="file" class="file" onchange="ProcesarArchivo(this,'filenameApertura')">
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-sm-4">
                                            <label class="col-sm-15 control-label" for="form-field-1" style="width: 100%; color: black;">Acta Cierre: </label>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group ">
                                                <div style=" height: 30px; margin-bottom: 3px;" class="form-control file-caption  kv-fileinput-caption">
                                                    <div class="file-caption-name" id="filenameCierre"></div>
                                                </div>
                                                <div class="input-group-btn">
                                                    <label for="fileActaCierre" class="btn btn-primary btn-file">
                                                        <i class=" clip-upload-3"></i>&nbsp; <span class="hidden-xs">Cargar …</span>
                                                        <input id="fileActaCierre" type="file" class="file" onchange="ProcesarArchivo(this,'filenameCierre')">
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-sm-4">
                                            <label class="col-sm-15 control-label" for="form-field-1" style="width: 100%; color: black;">Código de Fedatario: </label>
                                        </div>
                                        <div class="col-sm-6">
                                            @Html.TextBoxFor(model => model.MICROFORMA_CODIGO_FEDATARIO, new { @class = "form-control", @maxlength = "100", @style = "width:100%;text-transform: uppercase;" })
                                            @Html.ValidationMessageFor(model => model.MICROFORMA_CODIGO_FEDATARIO, string.Empty, new { @class = "cssMessageError" })
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-4">
                                            <label class="col-sm-15 control-label" for="form-field-1" style="width: 100%; color: black;">Comentario:</label>
                                        </div>
                                        <div class="col-sm-8">
                                            @Html.TextAreaFor(model => model.MICROFORMA_OBSERVACION, new { @class = "form-control", @maxlength = "3000", @style = "height:90px;resize: none;text-transform: uppercase;", onkeyup = "CountCharactersControlTxt(this.id,'Microforma_Grabar_lbl1', 3000)" })
                                            <label id="Microforma_Grabar_lbl1" style="width: 100%" class="Formato" runat="server" text=""></label>
                                        </div>
                                    </div>
                                </fieldset>
                            </div>
                        </div>
                    </div>
                </fieldset>
                <div class="modal-footer">
                    <button type="button" id="Microforma_Grabar_btn_Grabar" class="btn btn-blue"><i class="fa fa-save"></i> Grabar</button>
                    <button type="button" class="btn btn-light-grey" data-dismiss="modal"><i class="clip-close-4"></i> Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    @Html.Hidden("HDF_ID_MICROFORMA", Model.ID_MICROFORMA)
    @Html.Hidden("HDF_ACCION", Model.Accion)
}



